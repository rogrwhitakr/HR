##################################################################################################################################################################################
#	commands
##################################################################################################################################################################################

wo bin ich gerade?

	pwd, alias: gl / get-location
	
was ist im directory?

	ls, dir, get-ChildItem
	

Wie im Linux-directory?

	Mode

	-----
	darhs
	d---- 	-->“d” (indicates item is a directory) or “-” (indicates item is a file). 
	-a---	-->	last 4 entries present properties of a File/Directory . -->  “a” = archive bit is set
	--r--	--> “r” = read only
	---h-	--> “h” = hidden
	----s	--> “s” = system
	darhs	

	A “-” in any of these entries means the bit is not set.

	
test-path

	true / false

ghy, get-history 
	
	bei langen Sessions
	F7 geht auch, durchsuchbar
	F8 macht auch irgendwas


get-command -verb / -noun ist nützlich zum filtern!


get-content 
	
	notepad text.txt --> öffnet text in notepad
	start .\file --> öffnet im Standard-Programm
	invoke.item --> equivalent to clicking on a file where the file type determines which application is launched.
	.\file macht es auch
	
		zum Ansehen von den Inhalten einer Textdatei
		add-content fügt zeug dazu, am unteren Ende, ohne formatierung
		

zum Aufrufen von einem Programm: 

		start
		get-service
		start-service
			

get-help [COMMAND] -full oder -detailed --> mit Beispielen

	in der PowerShell Vers. 3.0 ist die Hilfe delokalisiert, es wird zuerst de-DE durchsucht nach Hilfethemen 
	http://www.windowspro.de/tipp/powershell-hilfedateien-fuer-dieses-cmdlet-koennen-von-get-help-auf-diesem-computer-nicht-gefun
			
	--> andere Sprachen addieren 
	--> als Admin ausführen 
	-->	update-help -uiCulture en-US

Clear-Host --> leert die Console
	
##################################################################################################################################################################################
#	ConditionalLogic
##################################################################################################################################################################################

Array
um RemoteComputer abzufragen

$Var = @(array of remote computers --> in "", if string)

$var.count

$var[0-inf.]

you can combine arrays --> $varX=@(1,2,3) + $varY=@(4,5,6)


Hash Tables
A Hash table is also known as a dictionary.It is an array that allows you to store data in a “key-value” pair association.

$var =@{var1=value;var2=value} --> apply "" as needed;


conditional Logic

The if statement syntax:

	if (condition) {code block}
	elseif (condition) {code block}
	else (condition) {code block}
	
	condition = an expression that results to a Boolean Value (True or False).
	code block = what to execute if condition is True.
	elseif (optional) = test an alternative condition if preceding condition was False.
	else (optional) = executes it's code block whenever none of the if or elseif statements return a True result.
	
hier her und nicht weiter!!!

once an if statement condition results in a True value the associated script block is executed, 
PowerShell stops testing subsequent conditions. The way around this is to use a switch statement.


##################################################################################################################################################################################
#	providers
##################################################################################################################################################################################

PowerShell -Providers

	A Provider is also called a “snap-in” which is a dynamic link library (.dll) built into PowerShell. 
	A library is code that instructs PowerShell to preform an action when we execute a command. 
	What this means is that we no longer have to write code, as we did in VBScript, to connect to the registry. 
	The code is provided for us, simplifying our efforts.	

get-PSProvider

	alias, variable, certificate, registry,...

get-PSDrive

	a Provider enables access
	

functions-Provider

	A function allows you to make calls to a block of code
	if you notice that you are using the same code over and over (within the same script), you should consider creating a function

	viele set-location-functions --> c: = set-location c:\
	clear-host
	
Registry-Provider !!!

	

##################################################################################################################################################################################
#	objects
##################################################################################################################################################################################

An object, in PowerShell, consists of properties (information we can gather) and methods (actions we can perform).

	Beispiel: light bulb. The properties of a light bulb could be color, wattage, and type (florescent, incandescent, or halogen). 
	Methods are the actions we can perform on the object such as; turn on the light bulb and turn off the light bulb.
	
	get-member --> returns properties, methods, data types
	
	get-ChildItem 
	
		-recurse gibt alle child-directories aus
		-name --> zum Beispiel alle docx-Dateien anzeigen
		
	dateTime ist ein massiver Hitler, weil er im US-Format? eingegeben werden muss !!!
	

Format
	
	format-wide --> columns : in wievielen Spalten anzeigen


group-object --> dann sortieren --> Sort-object --> pipeline geht immer weiter...	
					
	get-process WS (workingSet) refers to Size --> $WS -gt xyMB | stop-process <--
	

convert-toHtml/XML/CSV | out-file %filename%	


##################################################################################################################################################################################
#	variables
##################################################################################################################################################################################

1. Variables

	$_ – Contains the current pipeline object, used in script blocks, filters, and the where statement.
	$Args – Contains an array of the parameters passed to a function.
	$Error – Contains objects for which an error occurred while being processed in a cmdlet.
	$Home – Specifies the user’s home directory.
	$PsHome – The directory where the Windows PowerShell is installed.
	
Set-Variable --> write-Output

	--> geht natürlich auch:
		$xy = "asder" --> $xy <enter> --> PowerShell gibt Variable aus
		
	--> replace "asder", "ninja" <-- komma !
	
write-host	

	--> $strA = "wills" 
		write-host "ninja $strA wissen..."
		
assign data types

	--> [int]$intA = 15
		[double],
		etc.
	--> hier nochmal die liste zum tausendsten mal

		Type		Description
		[int]		32-bit signed integer
		[long]		64-bit signed integer
		[string]	Fixed-length string of Unicode characters
		[char]		A Unicode 16-bit character
		[byte]		An 8-bit unsigned character
		[bool]		Boolean True/False value
		[decimal]	An 128-bit decimal value
		[single]	Single-precision 32-bit floating point number
		[double]	Double-precision 64-bit floating point number
		[xml]		Xml object
		[array]		An array of values
		[hashtable]	Hashtable object
		
		
PowerShell Operators

	= 		Assigns a value to a variable.
	+ or += Addition.
	- or -= Subtraction.
	* or *= Multiplication.
	/ or /= Division.
	% or %= Modulus (retrieves the remainder of a division operation).
	“++”	Increments a value by 1.
	“–” 	Decrements a value by 1. -Hard to see, it is minus minus or (- -) without the space.
	
Powershell Zeug / weiß noch nicht 

	--> $a = $env:path; $a.Split(";")
	-->	PowerShellEnvironment-Pfad --> Ausgabe mehrerer Pfade--> Trennung am ; --> gibt eine saubere Liste


##################################################################################################################################################################################
#	else
##################################################################################################################################################################################